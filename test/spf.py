# Github: GWillS163
# User: 駿清清 
# Date: 28/09/2022 
# Time: 13:18
from typing import List
from sub0CrackerMain import printAnsInMap


def findOptimizePath(graph: dict, stt: list, end: list):
    path, cost = spf(graph, stt, end)
    print(path, cost)
    return path


def spf(graph: dict, stt: list, end: list, sttCost=0):  # -> List[List[int]]:
    # get stt up
    if str(stt) == str(end):
        return [stt], sttCost + 1
    if str(stt) not in graph.keys():
        return [], sttCost + 1

    nextHops = graph[str(stt)]
    pathDict = {}
    for nextHop in nextHops:
        (path, cost) = spf(graph, nextHop, end, sttCost)
        if not path:
            continue
        pathDict.update({cost: [stt] + path})
    return pathDict[min(pathDict.keys())], min(pathDict.keys())


if __name__ == '__main__':
    gra = {'[0, 0]': [[2, 0]],
           '[0, 3]': [[3, 3], [0, 0]],
           '[1, 3]': [[0, 3], [3, 3], [1, 5]],
           '[1, 4]': [[5, 4], [1, 3], [1, 5]],
           '[2, 2]': [[5, 2], [2, 5]],
           '[2, 5]': [[0, 5]],
           '[3, 1]': [[4, 1], [3, 4]],
           '[3, 3]': [[3, 1], [3, 4]],
           '[4, 0]': [[4, 2]],
           '[4, 2]': [[2, 2], [5, 2]],
           '[4, 4]': [[1, 4], [5, 4]],
           '[4, 5]': [[4, 4]],
           '[5, 0]': [[4, 0]],
           '[5, 2]': [[5, 5]],
           '[5, 5]': [[4, 5]]}
    # 	0	1	2	3	4	5
    # 0 ⑫	　	　	⑪	■	　
    # 1 　	　	■	⑧	⑦	　
    # 2 E	■	　	　	　	　
    # 3 ■	⑩	　	⑨	　	■
    # 4 ①	　	②	■	⑥	⑤
    # 5 S	■	③	　	　	④
    # print(spf(gra, [5, 0], [2, 0]))

    gra2 = {'[0, 0]': [[3, 0], [0, 5]],
            '[0, 4]': [[0, 0], [0, 5]],
            '[2, 1]': [[5, 1]],
            '[2, 5]': [[4, 5], [2, 0]],
            '[3, 0]': [[3, 5]],
            '[3, 5]': [[2, 5], [4, 5]],
            '[4, 1]': [[2, 1], [5, 1]],
            '[4, 5]': [[4, 1]],
            '[5, 0]': [[5, 2]],
            '[5, 1]': [[5, 0], [5, 2]],
            '[5, 2]': [[1, 2]],
            '[5, 4]': [[0, 4]]}
    # 	    0	1	2	3	4	5
    # 0 	②	　	　	　	①	　
    # 1 	　	■	E	　	　	■
    # 2 	　	⑩	　	　	　	⑪
    # 3 	③	　	　	　	　	④
    # 4 	■	⑥	　	　	　	⑤
    # 5 	⑨	⑦	⑧	■	S	■
    # print(spf(gra2, [5, 4], [1, 2]))

    gra3 = {'[0, 0]': [[3, 0], [0, 2]],
            '[0, 2]': [[6, 2]],
            '[0, 4]': [[7, 4], [0, 7]],
            '[0, 5]': [[5, 5]],
            '[0, 6]': [[3, 6], [0, 4], [0, 7]],
            '[0, 7]': [[7, 7]],
            '[2, 0]': [[0, 0], [3, 0], [2, 7]],
            '[2, 6]': [[0, 6], [3, 6], [2, 0], [2, 7]],
            '[2, 7]': [[0, 7], [7, 7]],
            '[3, 4]': [[7, 4], [3, 7]],
            '[3, 6]': [[3, 4], [3, 7]],
            '[3, 7]': [[7, 7]],
            '[4, 1]': [[4, 5]],
            '[4, 5]': [[0, 5], [5, 5]],
            '[5, 0]': [[7, 0], [5, 2]],
            '[5, 4]': [[5, 7], [5, 6]],
            '[5, 5]': [[5, 4], [5, 7], [5, 6]],
            '[6, 0]': [[5, 0], [7, 0], [6, 4]],
            '[6, 2]': [[6, 0], [6, 4]],
            '[6, 3]': [[6, 0], [6, 4]],
            '[7, 0]': [[7, 1]],
            '[7, 1]': [[4, 1]],
            '[7, 3]': [[6, 3]],
            '[7, 4]': [[7, 3]],
            '[7, 7]': [[7, 3]]}
    answerList = findOptimizePath(gra3, [2, 6], [5, 6])
